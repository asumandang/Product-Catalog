import { HttpErrorResponse } from '@angular/common/http';
import { inject, Injectable } from '@angular/core';
import { rxState } from '@rx-angular/state';
import { rxActions } from '@rx-angular/state/actions';
import { selectSlice, stateful } from '@rx-angular/state/selections';
import { catchError, EMPTY, map, switchMap } from 'rxjs';
import { ProductService } from '@product/product-data-access';
import * as i0 from "@angular/core";
export class ProductHomeStateService {
    constructor() {
        // Services
        this._productService = inject(ProductService);
        /**
         * Actions that manages event that would update the component's state
         */
        this._actions = rxActions();
        /**
         * Component state and its initial values
         */
        this._state = rxState(({ set }) => {
            // set initial state
            set({ products: [], action: 'initial', searchText: null, sort: null });
        });
        /**
         * Products used for display
         */
        this.product$ = this._state.select().pipe(selectSlice(['products', 'searchText', 'sort']), stateful(map(({ products, searchText, sort }) => {
            const filteredProducts = searchText
                ? products.filter((product) => product.name.toLowerCase().includes(searchText.toLowerCase()))
                : products;
            const mappedProducts = filteredProducts.map((product) => ({
                ...product,
                discountedPrice: product.price - product.price * (product.discount / 100),
            }));
            return sort
                ? mappedProducts.sort((a, b) => {
                    console.log(sort);
                    if (sort.by === 'price') {
                        return sort.sort === 'ascending'
                            ? a.price - b.price
                            : b.price - a.price;
                    }
                    else if (sort.by === 'discounted') {
                        return sort.sort === 'ascending'
                            ? a.discountedPrice - b.discountedPrice
                            : b.discountedPrice - a.discountedPrice;
                    }
                    else if (sort.by === 'name') {
                        return sort.sort === 'ascending'
                            ? a.name.localeCompare(b.name)
                            : b.name.localeCompare(a.name);
                    }
                    return 0;
                })
                : mappedProducts;
        })));
        this.action$ = this._state.select('action');
        this.sort$ = this._state.select('sort');
        this.isLoading$ = this._state
            .select('action')
            .pipe(stateful(map((action) => action === 'pending')));
        this.error$ = this._state
            .select('action')
            .pipe(stateful(map((action) => {
            if (action !== 'error') {
                return null;
            }
            return this._state.get('errorMessage');
        })));
        // sets actions to pending on calling load product command
        this._state.connect(this._actions.loadProducts$, (state) => ({
            ...state,
            errorMessage: null,
            action: 'pending',
        }));
        // loads the products on calling load product command
        this._state.connect(this._actions.loadProducts$.pipe(switchMap(() => this._productService.getProducts()), map((products) => products.map((product) => ({
            ...product,
            discountedPrice: product.price - product.price * (product.discount / 100),
        }))), catchError((err) => {
            this._actions.handleLoadingError(err);
            return EMPTY;
        })), (state, products) => ({
            ...state,
            products,
            action: 'done',
        }));
        // handle error that occurred while loading
        this._state.connect(this._actions.handleLoadingError$.pipe(map((err) => {
            const message = err instanceof HttpErrorResponse
                ? err.message
                : 'An unknown error has occurred. Please contact admin for assistance.';
            return message;
        })), (state, errorMessage) => {
            return { ...state, errorMessage, action: 'error' };
        });
        // set search text
        this._state.connect(this._actions.searchProduct$, (state, searchText) => {
            return { ...state, searchText };
        });
        // handle sorting
        this._state.connect(this._actions.sortBy$, (state, sortBy) => {
            const sort = { by: sortBy, sort: 'ascending' };
            // If previous sort existed and current sorting by is equal to the previous, toggle ascending/descending
            const previousSort = state.sort;
            if (previousSort && previousSort.by === sortBy) {
                sort.sort =
                    previousSort.sort === 'ascending' ? 'descending' : 'ascending';
            }
            return {
                ...state,
                sort,
            };
        });
    }
    loadProducts() {
        this._actions.loadProducts();
    }
    searchProduct(searchText) {
        this._actions.searchProduct(searchText);
    }
    sortBy(sortBy) {
        this._actions.sortBy(sortBy);
    }
    static { this.ɵfac = function ProductHomeStateService_Factory(t) { return new (t || ProductHomeStateService)(); }; }
    static { this.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ProductHomeStateService, factory: ProductHomeStateService.ɵfac }); }
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(ProductHomeStateService, [{
        type: Injectable
    }], () => [], null); })();
//# sourceMappingURL=data:application/json;base64,